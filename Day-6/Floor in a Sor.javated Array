/*
Given a sorted array arr[] of size n without duplicates, and given a value x. Floor of x is defined as the largest element k in arr[] such that k is smaller than or equal to x. Find the index of k(0-based indexing).

Examples

Input: n = 7, x = 0 arr[] = {1,2,8,10,11,12,19}
Output: -1
Explanation: No element less than 0 is found. So output is "-1".
Input: n = 7, x = 5 arr[] = {1,2,8,10,11,12,19}
Output: 1
Explanation: Largest Number less than 5 is 2 (i.e k = 2), whose index is 1(0-based indexing).
*/

class Solution {

    // Function to find floor of x
    // arr: input array
    // n is the size of array
    static int findFloor(long arr[], int n, long x) {
        
      
        int left=0,right=n-1;
        int floor=-1;
        
        while(left <= right)
        {
            
            int mid=(left+right)/2;
            
            if(arr[mid]==x)
            {
                return mid;
            }
            
            else if(arr[mid] < x)
            {
                floor=mid;
                
                left=mid+1;
            }
            
            else{
                right=mid-1;
            }
        }
        return floor;
    }
}
